data = require "main.data"

local INVUL = 150
local INPUT_LOCK = 70

function init(self)
	self.time = 0
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	self.invul = INVUL
	self.lock = 0
	data.player = msg.url()
	data.spawnpos = go.get_position()
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function move(self)
	local pos = go.get_position() + (self.move * data.spdmult)
	go.set_position(pos)
	data.playerpos = pos
	if vmath.length(self.move) > 0 then self.dir = vmath.normalize(self.move)
	end
end

local function dead(self)
	data.hp = 0
	data.deaths = data.deaths + 1
	msg.post("#co", "disable")
	sprite.play_flipbook("#sprite", "dead")
	sound.play("main:/sound#dead")
	msg.post("/effect", "explode", {pos = go.get_position()})
end

local function hit(self)
	if self.invul <= 0 then
		data.hp = data.hp - (1-data.defmult)
		if data.hp <= 0 then
			dead(self)
		else
			self.invul = INVUL
			sound.play("main:/sound#hit")
		end
	end
end

local function pick(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 18 then
		data.gold = data.gold + 5
		data.items = data.items + 1
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#coin")
	elseif t == 9 then
		data.gold = data.gold + 325
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 16)
		sound.play("main:/sound#coin")
	elseif t == 19 then
		data.key = true
		data.items = data.items + 1
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup2")
	elseif t >= 20 and t <= 23 then
		data.food = data.food + 0.15
		data.items = data.items + 1
		if data.food > 1 then data.food = 1
		end
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup")
	elseif t == 31 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#secret")
	elseif t == 63 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 16)
		if pos.y > 0 then
			msg.post("view#game", "status", {text = "HELLO THERE!"})
		else
			msg.post("view#game", "status", {text = "** CHEAT ROOM **"})
		end
	elseif t == 153 then
		data.ending = "LADDER"
		msg.post("view#complete", "show")
	end

	if t == 161 or t == 162 then
		msg.post("#wade", "enable")
	else
		msg.post("#wade", "disable")
	end

	if t == 163 or t == 164 then
		msg.post("#onfire", "enable")
		hit(self)
	else
		msg.post("#onfire", "disable")
	end
end

local function look(self)
	local p = go.get_position() + (self.dir * 5)
	local pos = data.world2tile(p)

	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 10 then
		data.secrets = data.secrets + 1
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		msg.post("view#game", "status", {text = "FOUND A SECRET!"})
		sound.play("main:/sound#secret")
	elseif t == 12 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		msg.post("view#game", "status", {text = "CHECKPOINT"})
		sound.play("main:/sound#secret")
		data.spawnpos = p
	elseif t == 48 and data.key then
		data.key = false
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 11)
		sound.play("main:/sound#unlock")
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul % 10 < 6 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

local function clear(self)
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTQUAD, 1)
	msg.post("/view#clear", "show")
	self.lock = INPUT_LOCK
end

local function anim(self)
	if self.move ~= vmath.vector3(0,0,0) and self.anim ~= self.move then
		if self.move.x > 0 then sprite.play_flipbook("#sprite", "walk-right")
		elseif self.move.x < 0 then sprite.play_flipbook("#sprite", "walk-left")
		elseif self.move.y > 0 then sprite.play_flipbook("#sprite", "walk-up")
		elseif self.move.y < 0 then sprite.play_flipbook("#sprite", "walk-down")
		end
		self.anim = vmath.vector3(self.move)
	elseif self.anim ~= self.move then
		if self.anim.x > 0 then sprite.play_flipbook("#sprite", "static-right")
		elseif self.anim.x < 0 then sprite.play_flipbook("#sprite", "static-left")
		elseif self.anim.y > 0 then sprite.play_flipbook("#sprite", "static-up")
		elseif self.anim.y < 0 then sprite.play_flipbook("#sprite", "static-down")
		end
		self.anim = vmath.vector3(self.move)
	end
end

local function stats(self)
	if data.shot < 1 then data.shot = data.shot + (data.cool * data.attmult)
		if data.shot > 1 then data.shot = 1
		end
	end

	data.food = data.food - 0.0002 
	
	if data.food > 0 and data.hp < 1 then 
		data.hp = data.hp + (0.0003 * data.stamult)
		data.food = data.food - (0.0002 * data.stamult)
		if data.hp > 1 then data.hp = 1
		end
	else
		data.hp = data.hp - 0.0004
		if data.hp < 0 then
			dead(self)
		end
	end

	if data.food < 0 then data.food = 0
	end
end

local function light(self)
	local pos = go.get_position()
	if pos.y > 723.5 then
		msg.post("#vig", "disable")
	else
		msg.post("#vig", "enable")
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING and data.hp > 0 then
		move(self)
		pick(self)
		look(self)
		flash(self)
		anim(self)
		stats(self)
		light(self)
	end

	self.move = vmath.vector3()
	if self.lock > 0 then self.lock = self.lock - 1 end
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end
end

local function respawn(self)
	data.hp = 1
	data.food = 1
	self.invul = INVUL
	sprite.play_flipbook("#sprite", "static-down")
	local pos = data.world2tile(go.get_position())
	tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 32)
	go.set_position(data.spawnpos)
	data.playerpos = go.get_position()
	msg.post("view#shutter", "fadein")
	msg.post("#co", "enable")
end

local function beamup(self)
	msg.post("#sprite", "disable")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") then
			hit(self)
		else
			collision(self, message)
		end
	elseif message_id == hash("animation_done") then
		respawn(self)
	elseif message_id == hash("trigger_response") and message.enter then
		if message.other_group == hash("shop") then
			msg.post("view#shop", "show")
			sound.play("main:/sound#secret")
		end
	elseif message_id == hash("ufo") then
		sprite.play_flipbook("#sprite", "static-down")
		msg.post("#co", "disable")
		sound.stop("main:/sound")
		local pos = go.get_position()
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos.y + 20, go.EASING_INSINE, 1, 1, beamup)
		sound.play("main:/sound#beam")
	elseif message_id == hash("monster") then
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5)
		go.animate("#wade", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.5)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end

local function shoot(self)
	local move = vmath.normalize(self.dir)
	factory.create("#shot-factory", nil, nil, {move = move * 1.5})
	sound.play("main:/sound#fireball")
	data.shot = 0
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = -data.speed
	elseif action_id == hash("right") then
		self.move.x = data.speed
	elseif action_id == hash("down") then
		self.move.y = -data.speed
	elseif action_id == hash("up") then
		self.move.y = data.speed
	elseif action_id == hash("action") and action.pressed and data.shot == 1 then
		shoot(self)
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then
		--data.items = data.totalitems
		--data.secrets = data.totalsecrets
		--data.deaths = 0
		--msg.post("view#complete", "show")
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return
	end
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_SHOP then
		msg.post("view#shop", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_COMPLETE then
		if action_id == hash("exit") and action.pressed then
			quit2menu(self)
		end
	end
end
