data = require "main.data"

local DRAG = 300
local ACCEL = 18
local SPEED_MAX = 60
local FALL_MAX = 180
local GRAVITY = 300
local JUMP = 130
local BOUNCE = 15
local ONGROUND = 10
local INVUL = 150
local INPUT_LOCK = 70

local function spawnpast(self)
	if data.state == data.STATE_PLAYING then
		factory.create("#past-factory")
	end
end

function init(self)
	self.fall = 0
	self.move = vmath.vector3()
	self.shove = vmath.vector3()
	self.correction = vmath.vector3()
	self.onground = 0
	self.invul = INVUL
	self.anim = 0
	msg.post(".", "acquire_input_focus")

	timer.delay(10, true, spawnpast)
	if data.level == 1 then
		timer.delay(10, false, function() msg.post("view#game", "tick", {text = "LOOK OUT FOR YOUR PAST SELF!"}) end)
		timer.delay(3, false, function() msg.post("view#game", "tick", {text = "COLLECT ALL GEMS TO OPEN THE EXIT"}) end)
		timer.delay(17, false, function() msg.post("view#game", "tick", {text = "STAND ON THE BUTTON TO HOLD THE DOOR OPEN"}) end)
		timer.delay(24, false, function() msg.post("view#game", "tick", {text = "WAIT FOR YOUR PAST SELF TO OPEN THE DOOR!"}) end)
	end
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function enableinput()
	msg.post(".", "acquire_input_focus")
end

local function pauseinput()
	msg.post(".", "release_input_focus")
	timer.delay(1, false, enableinput)
end
	

local function nextlevel(self)
	if data.level >= data.MAX_LEVELS then
		msg.post("view#complete", "show")
	else
		data.level = data.level + 1
		msg.post("game:/loader", "new_level")
	end
end

local function move(self, dt)
	if self.move.x > 0 then
		self.move.x = self.move.x - (DRAG * dt)
		if self.move.x < 0 then
			self.move.x = 0
		end
	elseif self.move.x < 0 then
		self.move.x = self.move.x + (DRAG * dt)
		if self.move.x > 0 then
			self.move.x = 0
		end
	end

	self.move.y = self.move.y - (GRAVITY * dt)
	if self.move.y < -FALL_MAX then
		self.move.y = -FALL_MAX
	end

	local pos = go.get_position() + (self.move * dt) + self.shove
	go.set_position(pos)
	data.playerpos = pos
	pos.z = self.anim
	table.insert(data.his, pos)
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul % 10 < 6 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

local function anim(self)
	local anim = 2

	if self.onground > 0 and math.abs(vmath.length(self.move)) > 10 then
		anim = 1
	end

	if anim ~= self.anim then
		sprite.play_flipbook("#sprite", tostring(anim))
		self.anim = anim
	end
end

local function clear(self)
	pauseinput()
	data.state = data.STATE_CLEAR
	msg.post("#co", "disable")
	sprite.play_flipbook("#sprite", "2")
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.3)
	msg.post("view#game", "tick", {text = "WELL DONE! AREA COMPLETE!"})
	timer.delay(4, false, nextlevel)
	sound.play("main:/sound#clear")
end

function update(self, dt)
	dt = data.capdt(dt)
	
	if data.state == data.STATE_PLAYING then
		move(self, dt)
		flash(self)
		anim(self)

		data.time = data.time + dt
	end

	if self.onground > 0 then
		self.onground = self.onground - 1
	end
	self.correction = vmath.vector3()
	self.shove = vmath.vector3()
end

local function jump(self)
	if self.onground > 0 then
		self.move.y = JUMP
		self.onground = 0
		sound.play("main:/sound#jump")
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			if math.abs(message.normal.x) == 1 then
				self.move.x = 0
			end

			if message.normal.y > 0.5 then
				if self.move.y < -2 then
					--landed
				end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y < -0.5 and self.move.y > 0 then
				self.move.y = -BOUNCE
			end
		end
	end
end

local function restart(self)
	msg.post("game:/loader", "reload_level")
end

local function dead(self)
	pauseinput()
	data.state = data.STATE_DEAD
	data.deaths = data.deaths + 1
	particlefx.play("#explode")
	sound.play("main:/sound#explode")
	msg.post("#sprite", "disable")
	msg.post("#co", "disable")
	timer.delay(4, false, restart)
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then
			self.move.x = -SPEED_MAX
		end
		sprite.set_hflip("#sprite", true)
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then
			self.move.x = SPEED_MAX
		end
		sprite.set_hflip("#sprite", false)
	elseif action_id == hash("action") and action.pressed then
		jump(self)
	elseif action_id == hash("restart") and action.pressed then
		msg.post("game:/loader", "reload_level")
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then
		--clear(self)
	end
end

local function input_dead(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		restart(self)
	end
end

local function input_clear(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("exit")) and action.pressed then
		nextlevel(self)
	end
end

local function input_complete(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if action.value < 0.2 then return
	end	
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_DEAD then
		input_dead(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.spawnpos = message.pos
	elseif message_id == hash("trigger_response") then
		if message.other_group == hash("exit") and message.enter then
			timer.delay(0.15, false, clear)
		end
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("past") then
			dead(self)
			msg.post("view#game", "tick", {text = "YOU MUST STAY APART..."})
		elseif message.other_group == hash("hazard") then
			dead(self)
			msg.post("view#game", "tick", {text = "DON'T TOUCH THE SPIKES!"})
		elseif message.other_group == hash("gem") then
			data.gems = data.gems + 1
			sound.play("main:/sound#pickup")
		else
			collision(self, message)
		end
	elseif message_id == hash("quit") then
		quit2menu(self)
	elseif message_id == hash("move") then
		self.shove = message.move
	end
end

