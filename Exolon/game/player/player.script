local data = require "main.data"
local obj = require "game.object.obj"

local SPEED = 30
local FALL_MAX = 120
local GRAVITY = 140
local JUMP = 90
local BOUNCE = 5
local ONGROUND = 30
local INVUL = 1.5
local INPUT_LOCK = 1
local BOMB_TIME = 50

local function bonus(self)
	if self.bonus > 0 then
		self.bonus = self.bonus - 25
		data.score = data.score + 25
		sound.play("main:/sound#tick")
	end
end

function init(self)
	self.dir = 1
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.pos = go.get_position()
	self.origin = go.get_position()
	self.anim = ""
	self.onground = 0
	self.invul = INVUL
	self.duck = false
	self.double = false
	self.dead = false
	self.bomb = 0
	self.bonus = 0
	self.tele = nil
	self.change = false
	msg.post(".", "acquire_input_focus")
	data.state = data.STATE_PLAYING
	timer.delay(0.05, true, bonus)
end

local function unlock(self)
	msg.post(".", "acquire_input_focus")
end

local function lock(self)
	msg.post(".", "release_input_focus")
	timer.delay(INPUT_LOCK, false, unlock)
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
	obj.clearall(self)
end

local function respawn(self)
	self.dead = false
	self.pos = vmath.vector3(self.origin)
	self.move = vmath.vector3()
	self.dir = 1
	self.invul = INVUL
	sprite.set_hflip("#sprite", false)
	msg.post("#co", "enable")
end

local function dead(self)
	if self.invul <= 0 and not self.dead then
		self.dead = true
		self.move.y = JUMP
		self.onground = 0
		timer.delay(2, false, respawn)
		sound.play("main:/sound#exp2")
		msg.post("#co", "disable")
	end
end

local function move(self, dt)
	if dt > 1/30 then
		dt = 1/30
	end

	if not data.onscreen(self.pos) then
		dead(self)
	end

	if self.onground > 0 and self.duck then
		self.move.x = 0
		msg.post("#co-top","disable")
	else
		msg.post("#co-top","enable")
	end
	
	self.move.x = self.move.x * SPEED
	self.move.y = self.move.y - (GRAVITY * dt)

	if self.move.y < -FALL_MAX then
		self.move.y = -FALL_MAX
	end

	local pos = (self.pos + (self.move * dt))
	pos.z = 0.8

	if pos.x >= 256 then
		pos.x = 6
		data.screen = data.screen + 1
		msg.post("/level", "newscreen")
		msg.post("/common/view#shutter", "fadein")
		self.origin = pos
	elseif pos.x < 4 then
		pos.x = 4
	end

	data.playerpos = pos
	self.pos = pos
	go.set_position(pos)

	self.move.x = 0
	self.duck = false
end

local function clear(self)
	msg.post("#co", "disable")
	msg.post("#co-top", "disable")
	msg.post("#co-mid", "disable")
	msg.post("/common/view#clear", "show", {bonus = not self.double})
	lock(self)
end

local function pick(self)
	local pos = data.world2tile(self.pos)
	local t = tilemap.get_tile("/common/view#screen", "world", pos.x, pos.y)

	if t == 7 then
		tilemap.set_tile("/common/view#screen", "world", pos.x, pos.y, 0)
		data.bombs = 10
		sound.play("main:/sound#chime1")
	elseif t == 28 then
		tilemap.set_tile("/common/view#screen", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#chime2")
		self.bonus = 1500
	end

	pos = data.world2tile(self.pos + vmath.vector3(0, -17, 0))
	t = tilemap.get_tile("/common/view#screen", "world", pos.x, pos.y)

	if t == 8 or t == 24 then
		tilemap.set_tile("/common/view#screen", "world", pos.x, pos.y, t + 1)
		msg.post("/common/effect", "exp-small", {pos = go.get_position() + vmath.vector3(0,-20,0)})
		if not self.double then
			dead(self)
		end
	elseif t == 66 then
		clear(self)
	end
end

local function flash(self, dt)
	if self.invul > 0 then
		self.invul = self.invul - dt
		if (self.invul * 80) % 10 < 6 then
			msg.post("#sprite", "disable")
		else
			msg.post("#sprite", "enable")
		end
	end
end

local function anim(self)
	local anim = "static"

	if self.dead then
		anim = "dead"
	elseif self.onground == 0 then 
		anim = "jump"
	elseif self.duck then
		anim = "duck"
	elseif self.move.x ~= 0 then
		anim = "walk"
	end

	if self.double then
		anim = anim.."-b"
	end

	if anim ~= self.anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		anim(self)
		move(self, dt)
		pick(self)
		flash(self, dt)
		data.time = data.time + dt
	end

	if self.onground > 0 then
		self.onground = self.onground - 1
	end
	
	if self.bomb > 0 then
		self.bomb = self.bomb - 1
	end
	
	self.correction = vmath.vector3()
end

local function jump(self)
	if self.onground > 0 then
		self.move.y = JUMP
		self.onground = 0
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			self.pos = self.pos + comp
			self.correction = self.correction + comp
			if math.abs(message.normal.x) == 1 then
				self.move.x = 0
			end

			if message.normal.y > 0.5 then
				if self.move.y < -2 then
					--landed
				end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y < -0.5 and self.move.y > 0 then
				self.move.y = -BOUNCE
			end
		end
	end
end

local function shoot(self)
	local pos = vmath.vector3(self.pos)
	pos.x = pos.x + (10 * self.dir)
	pos.z = pos.z - 0.1

	if string.find(self.anim, "duck") then
		pos.y = pos.y - 3
	else
		pos.y = pos.y + 1
	end
	
	local f = factory.create("#laser-factory", pos, nil, {move = self.dir})
	obj.add(f)

	if self.double then
		pos.y = pos.y - 5
		f = factory.create("#laser-factory", pos, nil, {move = self.dir})
		obj.add(f)
	end

	sound.play("main:/sound#shot")
end

local function bomb(self)
	local pos = vmath.vector3(self.pos)
	pos.x = pos.x - (10 * self.dir)
	pos.z = pos.z - 0.1

	if string.find(self.anim, "duck") then
		pos.y = pos.y + 3
	else
		pos.y = pos.y + 8
	end

	local f = factory.create("#bomb-factory", pos, nil, {move = self.dir})
	obj.add(f)

	sound.play("main:/sound#throw")

	data.bombs = data.bombs - 1
end

local function teleport(self)
	local pos = vmath.vector3(self.pos)
	local p1 = go.get_position(obj.tele[1])
	local p2 = go.get_position(obj.tele[2])

	local target = p2
	if vmath.length(p1 - pos) > 32 then
		target = p1
	end

	self.pos = target
	msg.post(obj.tele[1], "activate")
	msg.post(obj.tele[2], "activate")

	sound.play("main:/sound#teleport")
end

local function change(self)
	self.double = not self.double
	sound.play("main:/sound#chime2")
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.dir = -1
		self.move.x = -1
		sprite.set_hflip("#sprite", true)
	elseif action_id == hash("right") then
		self.dir = 1
		self.move.x = 1
		sprite.set_hflip("#sprite", false)
	elseif action_id == hash("up") and action.pressed then
		if self.tele ~= nil then
			teleport(self)
		elseif self.change then
			change(self)
		end
	elseif action_id == hash("down") then
		self.duck = true
	elseif action_id == hash("action") and action.pressed then
		jump(self)
	elseif action_id == hash("fire") then
		if action.pressed then
			shoot(self)
		end
		self.bomb = self.bomb + 2
		if self.bomb > BOMB_TIME and data.bombs > 0 then
			bomb(self)
			self.bomb = 0
		end
	elseif action_id == hash("exit") and action.pressed then
		msg.post("/common/view#pause", "show")
	elseif action_id == hash("start") and action.pressed then
		msg.post("/common/view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then
		--[[self.pos.x = 6
		self.pos.y = 64
		data.screen = data.screen + 1
		msg.post("/level", "newscreen")
		self.origin = self.pos
		change(self)
		clear(self)--]]
	end
end

local function input_clear(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("fire")) and action.pressed then
		data.level = data.level + 1
		obj.clearall(self)
		if data.level > data.MAX_LEVELS then
			msg.post("/common/view#clear", "hide")
			msg.post("/common/view#complete", "show")
		else
			msg.post("game:/loader", "new_level")
		end
	end
end

local function input_complete(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("fire")) and action.pressed then
		data.level = 1
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if action.value < 0.2 or self.dead then return
	end	
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("/common/view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("tele") then
		self.tele = message.id
	elseif message_id == hash("change") then
		self.change = message.flag
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("world") or message.other_group == hash("solid") then
			collision(self, message)
		elseif message.other_group == hash("enemy") or message.other_group == hash("shot") then
			timer.delay(0.05, false, dead)
		end
	elseif message_id == hash("bonus") then
		self.bonus = message.bonus
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end