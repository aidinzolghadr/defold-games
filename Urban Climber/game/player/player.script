data = require "main.data"

function init(self)
	self.snap = true
	self.fall = 0
	self.move = vmath.vector3()
	self.origin = go.get_position()
	self.moving = false
	msg.post(".", "acquire_input_focus")
end

local function reset(self)
	go.cancel_animations(".", "position")
	go.set_position(self.origin)
	sprite.play_flipbook("#sprite", "static")
	msg.post("view#shutter", "fadein")
	msg.post("heli", "reset")
	msg.post("#sprite", "enable")
	msg.post("#co", "enable")
	self.moving = false
	self.snap = true
	data.time = 60
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function movecomplete(self)
	self.moving = false
	sprite.play_flipbook("#sprite", "static")
end

local function move(self)
	if vmath.length(self.move) > 0 and not self.moving then
		if self.move.y ~= 0 then self.move.x = 0
		elseif self.move.x ~= 0 then self.move.y = 0
		end

		local pos = data.world2tile(go.get_position() + self.move)
		local t = tilemap.get_tile("level#tilemap", "world", pos.x, pos.y)

		if t == 29 then
			local time = 0.4
			if self.move.y > 0 then
				time = 0.7
			end
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, data.tile2world(pos), go.EASING_LINEAR, time, 0, movecomplete)
			self.moving = true
			if self.move.x ~= 0 then
				sprite.play_flipbook("#sprite", "crab")
			else
				sprite.play_flipbook("#sprite", "climb")
			end
		end
	end
	
	self.move = vmath.vector3()
end

local function cam(self)
	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position() + vmath.vector3(0,32,0)})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position() + vmath.vector3(0,32,0)})
	end
end

local function pick(self)
	if not self.moving then
		local pos = data.world2tile(go.get_position()) + vmath.vector3(0,1,0)
		local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

		if t >= 39 and t <= 42 then
			data.state = data.STATE_PICKUP
			msg.post("#co", "disable")
			msg.post("heli", "go")
		end
	end
end

local function clear(self)
	msg.post("view#clear", "show")
	sound.stop("main:/sound#music")
	sound.play("main:/sound#clear")
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		pick(self)

		data.time = data.time - dt
		if data.time <= 0 then
			msg.post("view#gameover", "show")
			sound.play("main:/sound#fail")
		end
	end

	data.playerpos = go.get_position()
	cam(self)
end

local function dropcomplete(self)
	data.state = data.STATE_PLAYING
	sprite.play_flipbook("#sprite", "static")
end

local function drop(self)
	local pos = go.get_position()
	
	if pos.y >= 104 then 
		pos.y = pos.y - 64
		data.state = data.STATE_DROP
		sprite.play_flipbook("#sprite", "fall")
		go.cancel_animations(".", "position.y")	
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos.y, go.EASING_INSINE, 0.5, 0, dropcomplete)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		drop(self)
	elseif message_id == hash("reset") then
		reset(self)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = -data.TILE_SIZE
	elseif action_id == hash("right") then
		self.move.x = data.TILE_SIZE
	elseif action_id == hash("down") then
		self.move.y = -data.TILE_SIZE
	elseif action_id == hash("up") then
		self.move.y = data.TILE_SIZE
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then

	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		msg.post("view#clear", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_GAMEOVER then
		msg.post("view#gameover", "input", {action_id = action_id, action = action})
	end
end
