local data = require "main.data"
local enemy = require "game.enemy.enemy"

local DRAG = 300
local ACCEL = 12
local SPEED = 70
local MAX = 240
local FALL_MAX = 180
local INVUL = 2
local INPUT_LOCK = 70

local function reset(self)
	self.move = vmath.vector3()
	self.press = 0
	self.invul = INVUL
	self.nodeid = ""
	data.dir = 1
	msg.post("view#game", "addpoint", {anim = "white"})
	go.set_position(self.origin)
end

local function getinput()
	msg.post(".", "acquire_input_focus")
end

function init(self)
	self.lastscore = data.score
	self.target = nil
	self.origin = go.get_position()
	reset(self)
	data.state = data.STATE_PLAYING
	msg.post(".", "acquire_input_focus")

	if data.level == 1 then
		data.sound("start")
	end
end

local function quit2menu(self)
	data.savegamefile()
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function enableinput()
	msg.post(".", "acquire_input_focus")
end

local function pauseinput(time)
	msg.post(".", "release_input_focus")
	timer.delay(time, false, enableinput)
end

local function move(self, dt)
	if self.move.x > MAX then
		self.move.x = MAX
	elseif self.move.x < -MAX then
		self.move.x = -MAX
	end
	
	local pos = go.get_position()
	pos = pos + self.move * dt

	if pos.y < 4 then
		pos.y = 4
	elseif pos.y > data.WORLD_H then
		pos.y = data.WORLD_H
	end
	
	go.set_position(pos)

	self.move.y = 0
	data.playerpos = pos

	msg.post("view#game", "setpoint", {nodeid = self.nodeid, pos = go.get_position()})

	if self.target ~= nil and pos.y <= 24 then
		msg.post(self.target, "dropoff")
		self.target = nil
	end
end

local function drag(self, dt)
	if self.move.x > 0 then
		self.move.x = self.move.x - DRAG * dt
		if self.move.x < 0 then 
			self.move.x = 0
		end
	elseif self.move.x < 0 then
		self.move.x = self.move.x + DRAG * dt
		if self.move.x > 0 then
			self.move.x = 0
		end
	end
end

local function exhaust(self)
	if self.press > 0 then
		msg.post("#ex-r", "enable")
		msg.post("#ex-l", "disable")
	elseif self.press < 0 then
		msg.post("#ex-r", "disable")
		msg.post("#ex-l", "enable")
	else
		msg.post("#ex-r", "disable")
		msg.post("#ex-l", "disable")
	end
	self.press = 0
end

local function flash(self, dt)
	if self.invul > 0 then
		self.invul = self.invul - dt
		if (self.invul * 80) % 10 < 6 then
			msg.post("#sprite", "disable")
		else
			msg.post("#sprite", "enable")
		end
	end
end

local function score(self)
	if math.floor(data.score / 10000) > math.floor(self.lastscore / 10000) then
		data.lives = data.lives + 1
		data.bombs = data.bombs + 1
		data.sound("extra")
	end
	self.lastscore = data.score

	if data.score > data.save.hiscore then
		data.save.hiscore = data.score
	end
end
	
local function clear(self)
	msg.post("view#clear", "show", {total = data.men})
	pauseinput(2)
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self, dt)
		drag(self, dt)

		if self.target ~= nil then
			msg.post(self.target, "position", {pos = go.get_position() + vmath.vector3(0,-8,0)})
		end
	end

	score(self)
	exhaust(self)
	flash(self, dt)
end

local function lifelost(self)
	if data.lives > 0 then
		msg.post("#sprite", "enable")
		msg.post("#co", "enable")
		self.invul = INVUL
	else
		msg.post("view#gameover", "show")
		pauseinput(2)
	end
end

local function dead(self)
	self.move.x = self.move.x / 2
	msg.post("#sprite", "disable")
	msg.post("#co", "disable")
	particlefx.play("#exp")
	data.sound("exp-big")
	pauseinput(2)
	data.lives = data.lives - 1
	timer.delay(2, false, lifelost)

	if self.target ~= nil then
		msg.post(self.target, "release")
		self.target = nil
	end
end

local function shoot(self)
	local pos = go.get_position()
	pos.x = pos.x + data.dir * 12
	pos.y = pos.y - 0.5
	factory.create("#laser-factory", pos, nil, {move = self.move.x})
	data.sound("laser")
end

local function hyperspace(self)
	msg.post("view#shutter", "smart")
	data.sound("hyperspace")
	local pos = go.get_position()
	local r = data.CANV_W * 4
	pos.x = pos.x + math.random(-r, r)
	go.set_position(pos)
	self.invul = 0.5
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		sprite.set_hflip("#sprite", true)
		data.dir = -1
		self.press = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		sprite.set_hflip("#sprite", false)
		data.dir = 1
		self.press = 1
	elseif action_id == hash("up") then
		self.move.y = SPEED
	elseif action_id == hash("down") then
		self.move.y = -SPEED
	elseif action_id == hash("action") and action.pressed then
		shoot(self)
	elseif action_id == hash("smart") and action.pressed and data.bombs > 0 then
		msg.post("view#script", "smart")
		data.sound("smart")
		data.bombs = data.bombs - 1
	elseif action_id == hash("hyperspace") and action.pressed then
		hyperspace(self)
	elseif (action_id == hash("exit") or action_id == hash("start")) and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed and sys.get_engine_info().is_debug then
		clear(self)
	end
end

local function input_clear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		msg.post("main:/handler", "reload_level")
	end
end

local function input_gameover(self, action_id, action)
	if (action_id == hash("exit") or action_id == hash("start") or action_id == hash("action")) and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if action.value < 0.2 then return
	end	
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("collision_response") then
		if message.other_group == hash("man") then
			local pos = go.get_position()
			if self.target == nil and pos.y > 24 then
				self.target = message.other_id
				msg.post(self.target, "rescue")
			end
		elseif self.invul <= 0 and data.state == data.STATE_PLAYING then
			dead(self)
		end
	elseif message_id == hash("scan") then
		self.nodeid = message.nodeid
	elseif message_id == hash("pauseinput") then
		msg.post(".", "release_input_focus")
		timer.delay(message.delay, false, getinput)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end
