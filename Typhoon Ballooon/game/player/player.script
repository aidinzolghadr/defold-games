data = require "main.data"

local DRAG = 0.005
local ACCEL = 0.01
local SPEED_MAX = 0.5
local FALL_MAX = 1.0
local GRAVITY = 0.005
local BURN = 0.03

go.property("gain", 0)

function init(self)
	self.snap = true
	self.move = vmath.vector3(0, 0, 0)
	self.correction = vmath.vector3()
	msg.post(".", "acquire_input_focus")
	sound.play("main:/sound#burn", {gain = 0.01})
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function limit(self)
	if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX
	elseif self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX
	end
	if self.move.y > SPEED_MAX then self.move.y = SPEED_MAX
	elseif self.move.y < -SPEED_MAX then self.move.y = -SPEED_MAX
	end
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)

	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position()})
	end
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function wind(self)
	local w = go.get("wind", "euler.z")

	w = math.rad(w)
	data.wind = w

	local wind = vmath.vector3(math.cos(w) / 300, math.sin(w) / 500, 0)
	self.move = self.move - wind
end

local function pick(self)
	local off = {
		vmath.vector3( 0,-8, 0),
		vmath.vector3(-8, 8, 0),
		vmath.vector3( 8, 8, 0)
	}

	for n = 1, 3 do
		local pos = data.world2tile(go.get_position() + off[n])
		local t = tilemap.get_tile("level#tilemap", "world", pos.x, pos.y)
		if t == 19 then
			tilemap.set_tile("level#tilemap", "world", pos.x, pos.y, 0)
			sound.play("main:/sound#pickup")
			data.stars = data.stars + 1
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING and not self.dead then
		limit(self)
		move(self)
		drag(self)
		gravity(self)
		wind(self)
		pick(self)

		data.time = data.time + dt
	end
	sound.set_gain("main:/sound#burn", self.gain)
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			if math.abs(message.normal.x) > 0.5 then
				self.move.x = 0
			end
			if math.abs(message.normal.y) > 0.5 then
				self.move.y = 0
			end
		end
	end
end

local function respawn(self)
	self.snap = true
	self.dead = false
	self.move = vmath.vector3()
	data.retries = data.retries + 1
	go.set_position(data.spawnpos)
	sprite.play_flipbook("#sprite", "player")
	msg.post("view#shutter", "fadein")
end

local function dead(self)
	if not self.dead then
		sprite.play_flipbook("#sprite", "explode")
		go.animate("#", "gain", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.25)
		self.dead = true
		timer.delay(1.5, false, respawn)
		sound.play("main:/sound#explode")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.spawnpos = message.pos
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("world") then
			collision(self, message)
		elseif message.other_group == hash("spike") then
			dead(self)
		elseif message.other_group == hash("finish") then
			go.animate("#", "gain", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.25)
			msg.post("view#complete", "show")
			msg.post("#co", "disable")
		end
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end

local function volume(self, pressed, released)
	if pressed then
		go.animate("#", "gain", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.05)
	elseif released then
		go.animate("#", "gain", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.25)
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
	elseif action_id == hash("action") then
		self.move.y = self.move.y + ACCEL
		volume(self, action.pressed, action.released)
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then

	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

local function input_complete(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end
