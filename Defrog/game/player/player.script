local data = require "main.data"

local HOP = 16
local HOP_TIME = 0.05

local function reset(self)
	self.dead = false
	self.moving = false
	self.maxy = self.origin.y
	data.time = 30
	go.cancel_animations(".")
	go.set_position(self.origin)
	go.set_rotation(vmath.quat_rotation_z(0))
	msg.post("#co", "enable")
	sprite.play_flipbook("#sprite", "player")
end

function init(self)
	self.origin = go.get_position()
	self.move = vmath.vector3()
	self.carry = 0
	self.home = 0
	self.rot = 0
	self.col = nil
	self.dead = false
	reset(self)
	data.state = data.STATE_PLAYING
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	data.savegamefile()
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function enableinput()
	msg.post(".", "acquire_input_focus")
end

local function pauseinput(time)
	msg.post(".", "release_input_focus")
	timer.delay(time, false, enableinput)
end

local function movecomplete(self)
	self.moving = false
	local pos = go.get_position()
	if pos.y > self.maxy then
		data.score = data.score + 10
		self.maxy = pos.y
	end
end

local function checkbounds(pos)
	if pos.x >= 0 and pos.x <= 224 and pos.y >= 24 and pos.y <= 216 then
		return true
	else
		return false
	end
end

local function move(self, dt)
	local pos = go.get_position()
	pos.x = pos.x + (self.carry * dt)
	go.set_position(pos)
	
	if vmath.length(self.move) ~= 0 then
		if self.move.x ~= 0 then
			self.move.y = 0
		end

		local pos = go.get_position() + self.move * HOP

		if checkbounds(pos) then
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, HOP_TIME, 0, movecomplete)
			go.set_rotation(vmath.quat_rotation_z(math.rad(self.rot)))
			sprite.play_flipbook("#sprite", "hop")
			data.sound("hop")
			self.moving = true
		end
	end
	
	self.carry = 0
	self.move = vmath.vector3()
end

local function dead(self, anim)
	self.dead = true
	msg.post("#co", "disable")
	go.set_rotation(vmath.quat_rotation_z(0))
	sprite.play_flipbook("#sprite", anim)
	pauseinput(2)
	data.sound("dead")
	if data.lives <= 0 then
		msg.post("view#gameover", "show")
	else
		data.lives = data.lives - 1
		timer.delay(2, false, reset)
	end
end

local function water(self)
	local pos = go.get_position()
	if pos.y > 120 and self.col == nil and not self.dead then
		dead(self, "splash")
	end
	self.col = nil
end

local function clear(self)
	msg.post("view#clear", "show")
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		if not self.moving and not self.dead then
			move(self, dt)
			water(self)
			data.time = data.time - dt
			if data.time < 0 then
				data.time = 0
				dead(self, "dead")
			end
		end
	end

	if data.score > data.save.hiscore then
		data.save.hiscore = data.score
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") and action.pressed then
		self.move.x = -1
		self.rot = 90
	elseif action_id == hash("right") and action.pressed then
		self.move.x = 1
		self.rot = -90
	elseif action_id == hash("up") and action.pressed then
		self.move.y = 1
		self.rot = 0
	elseif action_id == hash("down") and action.pressed then
		self.move.y = -1
		self.rot = 180
	elseif (action_id == hash("exit") or action_id == hash("start")) and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed and sys.get_engine_info().is_debug then
		msg.post("view#clear", "show")
	end
end

local function input_clear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		msg.post("main:/handler", "reload_level")
	end
end

local function input_gameover(self, action_id, action)
	if (action_id == hash("exit") or action_id == hash("action")) and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if action.value < 0.2 then return
	end	
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("collision_response") then
		self.col = message.other_group
		if message.other_group == hash("enemy") and not self.dead then
			dead(self, "dead")
		end
	elseif message_id == hash("move") then
		self.carry = message.move * data.speed
	elseif message_id == hash("home") then
		self.home = self.home + 1
		data.score = data.score + 50
		data.score = data.score + (math.floor(data.time) * 10)
		if self.home >= 5 then
			data.score = data.score + 1000
			clear(self)
		end
		data.sound("home")
		reset(self)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end