data = require "main.data"

local FALL_MAX = 3.0
local GRAVITY = 0.2
local JUMP = 3.2
local BOUNCE = 0.1
local ONGROUND = 10
local INVUL = 150
local INPUT_LOCK = 70

function init(self)
	self.fall = 0
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	self.onground = 0
	self.invul = INVUL
	self.lock = 0
	self.ladder = false
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	msg.post("main:/handler", "show_menu")
end

local function endlevel(self)
	--data.level = data.MAX_LEVELS
	
	data.level = data.level + 1
	if data.level <= data.MAX_LEVELS then
		msg.post("game:/loader", "new_level", {})
	else
		msg.post("#sprite", "disable")
		msg.post("#co", "disable")
		msg.post("view#complete", "show")
	end
end	

local function move(self)
	local pos = go.get_position() + self.move
	pos.z = 0.5
	go.set_position(pos)
	data.playerpos = pos
end

local function gravity(self)
	if not self.ladder then
		self.move.y = self.move.y - GRAVITY
		if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
	end
end

local function respawn(self)
	data.state = data.STATE_PLAYING
	data.deaths = data.deaths + 1
	msg.post("effect", "dust", {pos = go.get_position()})
	msg.post("#sprite", "enable")
	msg.post("#co", "enable")
	sound.play("main:/sound#hit")
	if data.boss then
		msg.post("/boss", "reset")
	end
end

local function dead(self)
	if self.invul <= 0 then
		data.state = data.STATE_RESPAWN
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, data.spawnpos, go.EASING_LINEAR, 1, 0, respawn)
		sound.play("main:/sound#explode")
		msg.post("effect", "explode", {pos = go.get_position()})
		msg.post("#sprite", "disable")
		msg.post("#co", "disable")
		self.move = vmath.vector3()
		self.invul = INVUL
		self.lock = 30
	end
end

local function pick(self)
	local pos = go.get_position()
	pos.y = pos.y - 5.9
	pos = data.world2tile(pos)
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 199 then self.ladder = true
	else self.ladder = false
	end

	pos = data.world2tile(go.get_position())
	t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 3 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup")
		data.score = data.score + 50
		data.gems = data.gems + 1
	elseif t == 6 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		data.secrets = data.secrets + 1
		msg.post("view#game", "status", {text = "FOUND A SECRET AREA!"})
		sound.play("main:/sound#chime")
	elseif t == 7 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		data.score = data.score + 1000
		sound.play("main:/sound#chime3")
	elseif t == 302 and data.bombs < 3 then
		data.bombs = data.bombs + 1
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#chime2")
	elseif t == 90 then
		sound.play("main:/sound#chime")
		endlevel(self)
	end
end

local function anim(self)
	if self.move.y ~= 0 and self.move.x == 0 and self.ladder then
		if self.anim.y ~= self.move.y then
			msg.post("#sprite", "play_animation", {id = hash("climb")})
			self.anim.y = self.move.y
		end
		return
	elseif self.ladder and self.move.x == 0 then
		msg.post("#sprite", "play_animation", {id = hash("climb-static")})
		self.anim.y = 0
	else
		self.anim.y = 0
	end
	
	if self.onground == 0 and vmath.length(self.move) ~= 0 and not self.ladder then
		msg.post("#sprite", "play_animation", {id = hash("jump")})
		self.anim = vmath.vector3(0,0,0)
		if self.dir.x == -1 then sprite.set_hflip("#sprite", true)
		else sprite.set_hflip("#sprite", false)
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		msg.post("#sprite", "play_animation", {id = hash("run")})
		if self.dir.x == -1 then
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		msg.post("#sprite", "play_animation", {id = hash("static")})
		self.anim = vmath.vector3(0,0,0)
		if self.dir.x == -1 then sprite.set_hflip("#sprite", true)
		else sprite.set_hflip("#sprite", false)
		end
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul % 10 < 6 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		gravity(self)
		pick(self)
		flash(self)
		anim(self)
	end

	if self.onground > 0 then self.onground = self.onground - 1 end
	if self.lock > 0 then self.lock = self.lock - 1 end
	self.correction = vmath.vector3()
	self.move.x = 0
	if self.ladder then self.move.y = 0
	end
end

local function jump(self)
	if self.onground > 0 then
		self.move.y = JUMP
		self.onground = 0
		sound.play("main:/sound#hop")
	end
end

local function bomb(self)
	local pos = go.get_position() + vmath.vector3(0,3,0)
	factory.create("#bomb-factory", pos, nil, {move = self.dir})
	data.bombs = data.bombs - 1
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y == 1 then
				if self.move.y < -2.5 then
					sound.play("main:/sound#step")
					msg.post("effect", "dust", {pos = go.get_position()})
				end
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y == -1 and self.move.y > 0 then self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		data.spawnpos = message.pos
	elseif message_id == hash("contact_point_response") then
		local group = message.other_group 
		if group == hash("world") then
			collision(self, message)
		elseif group == hash("enemy") then
			dead(self)
		elseif group == hash("boss") then
			dead(self)
		end
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		self.move.x = -1
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = 1
		self.dir.x = 1
	elseif action_id == hash("up") and self.ladder then
		self.move.y = 1
		self.dir.y = 1
	elseif action_id == hash("down") and self.ladder then
		self.move.y = -1
		self.dir.y = -1
	elseif action_id == hash("action") and action.pressed then
		jump(self)
	elseif action_id == hash("fire") and action.pressed then
		if data.bombs > 0 then
			bomb(self)
		else
			sound.play("main:/sound#blip-low2")
		end
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
	elseif action_id == hash("debug") and action.pressed then
		--endlevel(self)
	end
end

local function input_pause(self, action_id, action)
	msg.post("view#pause", "input", {action_id = action_id, action = action})
end

local function input_complete(self, action_id, action)
	if action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return
	end
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_PAUSE then
		input_pause(self, action_id, action)
	elseif data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
	end
end
