data = require "main.data"

local INPUT_LOCK = 30
local SPEED = 0.2
local INVUL = 150

function init(self)
	self.lock = 0
	self.invul = INVUL
	self.move = vmath.vector3()
	self.switch = false
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function clear(self)
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0,0,0), go.EASING_INSINE, 0.5, 0.2)
	sound.play("main:/sound#exit")
	msg.post("view#clear", "show")
	self.lock = INPUT_LOCK
end

local function gameover(self)
	msg.post("view#gameover", "show")
	msg.post("#co", "disable")
	msg.post("#sprite", "disable")
	particlefx.play("#pfx")
	sound.play("main:/sound#explode")
	self.lock = INPUT_LOCK
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul % 10 < 6 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end
end

local function switch(self, pos, t)
	self.switch = true

	if t == 25 then tilemap.set_tile("/level#screen", "world", pos.x, pos.y, 26)
	else tilemap.set_tile("/level#screen", "world", pos.x, pos.y, 25)
	end

	sound.play("main:/sound#click")

	for y = 1, 12 do
		for x = 1, 17 do
			t = tilemap.get_tile("/level#screen", "world", x, y)
			if t == 33 or t == 34 then
				tilemap.set_tile("/level#screen", "world", x, y, t+16)
			elseif t == 49 or t == 50 then
				tilemap.set_tile("/level#screen", "world", x, y, t-16)
			end
		end
	end
end

local function pickup(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#screen", "world", pos.x, pos.y)
	if t == 19 then
		tilemap.set_tile("/level#screen", "world", pos.x, pos.y, 0)
		sound.play("main:/sound#key")
		data.keys = data.keys + 1
	elseif t == 25 or t == 26 then
		if not self.switch then
			switch(self, pos, t)
		end
	else
		self.switch = false
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		flash(self)
		pickup(self)
	end
	
	if self.lock > 0 then self.lock = self.lock - 1 end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		msg.post("#co", "enable")
		msg.post("#sprite", "enable")
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1,1,1), go.EASING_INSINE, 0.1)
		self.invul = INVUL
	elseif message_id == hash("trigger_response") then
		if message.other_group == hash("coin") then
			msg.post("/level", "delete", {id = message.other_id})
			sound.play("main:/sound#coin")
			data.coins = data.coins - 1
			if data.coins == 0 then
				msg.post(data.exit, "open")
			end
		elseif message.other_group == hash("exit") then
			if data.coins == 0 then clear(self)
			end
		end
	elseif message_id == hash("collision_response") then
		if message.other_group == hash("enemy") and self.invul == 0 and data.state == data.STATE_PLAYING then
			gameover(self)
		end
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end

local function movecomplete(self)
	self.lock = 0
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#screen", "world", pos.x, pos.y)

	if t == 9 then
		pos = self.move
		move(self, pos, true)
	end
end

function anim(self)
	go.set_scale(vmath.vector3(1.5,1.5,1))
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1,1,1), go.EASING_OUTSINE, 0.15)
	particlefx.play("#move")
end

function move(self, v, b)
	local pos = go.get_position() + v
	local p = data.world2tile(pos)
	local t = tilemap.get_tile("/level#screen", "world", p.x, p.y)

	if t == 44 and data.keys > 0 then
		tilemap.set_tile("/level#screen", "world", p.x, p.y, 0)
		sound.play("main:/sound#click")
		data.keys = data.keys - 1
		t = 0
	end

	if v.x > 0 then sprite.set_hflip("#sprite", false)
	elseif v.x < 0 then sprite.set_hflip("#sprite", true)
	end
	
	if t < 41 then
		if t == 12 and v.y ~= data.TILE_SIZE then return end
		if t == 13 and v.y ~= -data.TILE_SIZE then return end
		if t == 14 and v.x ~= -data.TILE_SIZE then return end
		if t == 15 and v.x ~= data.TILE_SIZE then return end
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, SPEED, 0, movecomplete)
		anim(self)
		self.move = v
		self.lock = INPUT_LOCK
	elseif b then
		self.move = -self.move
		local pos = go.get_position() - v
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, SPEED, 0, movecomplete)
		anim(self)
		self.lock = INPUT_LOCK
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		move(self, vmath.vector3(-data.TILE_SIZE, 0, 0))
	elseif action_id == hash("right") then
		move(self, vmath.vector3(data.TILE_SIZE, 0, 0))
	elseif action_id == hash("down") then
		move(self, vmath.vector3(0, -data.TILE_SIZE, 0))
	elseif action_id == hash("up") then
		move(self, vmath.vector3(0, data.TILE_SIZE, 0))
	elseif action_id == hash("restart") and action.pressed then
		msg.post("/level", "restart")
		data.state = data.STATE_PLAYING
		sound.play("main:/sound#click")
		self.lock = INPUT_LOCK
	elseif action_id == hash("exit") and action.pressed then
		msg.post("view#pause", "show")
		sound.play("main:/sound#click")
	elseif action_id == hash("debug") and action.pressed then
		--clear(self)
	end
end

local function input_clear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level <= data.MAX_LEVELS then
			msg.post("/view#clear", "hide")
			msg.post("/level", "restart")
			data.state = data.STATE_PLAYING
		else
			quit2menu(self)
		end
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return
	end	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_CLEAR then
		input_clear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		msg.post("view#gameover", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	end
end
