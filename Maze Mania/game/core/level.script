local data = require "main.data"

local function copy(self)
	sx, sy, w, h = tilemap.get_bounds("#screen")

	for y = sy, h do
		for x = sx, w do
			local offset = (data.level - 1) * 17
			local t = tilemap.get_tile("#tilemap", "world", x + offset, y)
			tilemap.set_tile("#screen", "world", x, y, t)
		end
	end
end

local function parse(self)
	sx, sy, w, h = tilemap.get_bounds("#screen")

	data.coins = 0

	for y = sy, h do
		for x = sx, w do
			local t = tilemap.get_tile("#screen", "world", x, y)
			local pos = data.tile2world(vmath.vector3(x,y,0))
			local obj = nil
			
			if t == 1 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				msg.post("/player", "position", {pos = data.tile2world(vmath.vector3(x, y, 0.5))})
			elseif t == 3 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				obj = factory.create("#coin-factory", pos)
				data.coins = data.coins + 1
			elseif t == 6 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				obj = factory.create("#star-factory", pos)
			elseif t == 10 then
				obj = factory.create("#gate-factory", pos)
			elseif t == 16 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				obj = factory.create("#exit-factory", pos)
				data.exit = obj
			elseif t == 20 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				obj = factory.create("#updown-factory", pos)
			elseif t == 22 then
				tilemap.set_tile("#screen", "world", x, y, 0)
				obj = factory.create("#leftright-factory", pos)
			end

			if obj ~= nil then table.insert(self.spawned, obj)
			end
		end
	end
end

local function makelevel(self)
	self.spawned = {}
	data.time = 61
	data.keys = 0
	copy(self)
	parse(self)
end

function init(self)
	msg.post("#tilemap", "disable")
	makelevel(self)
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		data.time = data.time - dt
		if data.time < 0 then data.time = 0
		end
	end
end

local function delete(self, id)
	for k,v in pairs(self.spawned) do
		if v == id then
			go.delete(id)
			table.remove(self.spawned, k)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("restart") then
		for k,v in pairs(self.spawned) do
			go.delete(v)
		end
		makelevel(self)
		msg.post("view#shutter", "fadein")
	elseif message_id == hash("delete") then
		delete(self, message.id)
	end 
end


